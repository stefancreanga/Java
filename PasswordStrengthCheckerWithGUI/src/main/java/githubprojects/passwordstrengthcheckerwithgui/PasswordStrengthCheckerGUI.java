package githubprojects.passwordstrengthcheckerwithgui;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;

public class PasswordStrengthCheckerGUI extends Application {

    private final checkerMethodsGUI checker = new checkerMethodsGUI();
    private long lastKeyPressTime = 0;
    private final List<Long> keystrokeTimings = new ArrayList<>();

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Password Strength Checker");

        // Field to capture keystroke timings, isn't used for anything else
        TextField inputField = new TextField();
        inputField.setPromptText("Type something to generate a password");
        inputField.getStyleClass().add("text_field");

        // Text to input a password, or be filled by the generated password
        TextField passwordField = new TextField();
        passwordField.setPromptText("Enter Password");
        passwordField.getStyleClass().add("text-field");

        // Results are displayed here.
        TextArea resultArea = new TextArea();
        resultArea.setEditable(false);
        resultArea.getStyleClass().add("text-area");

        // Button to generate a password
        Button genButton = new Button("Generate password");
        genButton.getStyleClass().add("button");

        // Button to check the strength
        Button checkButton = new Button("Check Strength");
        checkButton.getStyleClass().add("button");

        // Button to exit
        Button exitButton = new Button("Exit");
        exitButton.getStyleClass().add("button");

        // Centering generating button
        HBox genButtonBox = new HBox(genButton);
        genButtonBox.setAlignment(Pos.CENTER);

        // Centering check button
        HBox checkButtonBox = new HBox(checkButton);
        checkButtonBox.setAlignment(Pos.CENTER);

        // Centering exit button
        HBox exitButtonBox = new HBox(exitButton);
        exitButtonBox.setAlignment(Pos.CENTER);

        // Captures keystroke timings for a better randomizer
        inputField.setOnKeyPressed(e -> {
            long currentTime = System.currentTimeMillis();
            if (lastKeyPressTime != 0) {
                keystrokeTimings.add(currentTime - lastKeyPressTime);
            }
            lastKeyPressTime = currentTime;
        });

        // Generates the password and puts the generated password in the passwordField, to check the password.
        genButton.setOnAction(e -> {
            String generatedPassword = checker.generatePassword(keystrokeTimings);
            passwordField.setText(generatedPassword);
            resultArea.setText("Generated Password: " + generatedPassword);
        });

        // Checks the password (either generated by the aforementioned function or typed manually)
        checkButton.setOnAction(e -> checker.checkPasswordStrength(passwordField, resultArea));
        exitButton.setOnAction(e -> primaryStage.close());

        VBox layout = new VBox(10, inputField, genButtonBox, passwordField, checkButtonBox, resultArea, exitButtonBox);
        layout.setPadding(new Insets(10));

        Scene scene = new Scene(layout, 600, 400);
        scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
